/*
   Copyright 2011 Benedito Barbosa Ribeiro Neto/Christian Linhares Peixoto/Mauricio da Silva Marinho

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 */
package org.wave.resources.generators;

import java.io.IOException;
import java.io.Writer;

import javax.annotation.processing.Filer;
import javax.lang.model.element.Element;
import javax.tools.FileObject;
import javax.tools.JavaFileObject;
import javax.tools.StandardLocation;

import org.wave.resources.exceptions.ResourcesException;
import org.wave.resources.factories.ContentFactory;
import org.wave.resources.factories.PropertiesFactory;
import org.wave.resources.messages.ErrorMessage;
import org.wave.resources.units.CompilationUnit;
import org.wave.resources.units.PropertiesUnit;
import org.wave.resources.units.ResourceUnit;
import org.wave.resources.utils.PropertiesUtil;
import org.wave.resources.utils.SourcesUtil;


public class FileGenerator {

	private Filer filer;

	public FileGenerator(Filer filer) {
		this.filer = filer;
	}

	public void generateProperties(Element element) throws ResourcesException {
		this.writePropertiesFile(element, StandardLocation.SOURCE_OUTPUT);
		this.writePropertiesFile(element, StandardLocation.CLASS_OUTPUT);
	}

	public void generateSources(Element element) throws ResourcesException {
		try {
			this.writeSourceFile(element, new PropertiesUnit());

			for (Element enumConstant : SourcesUtil.getEnumConstants(element)) {
				this.writeSourceFile(enumConstant, new ResourceUnit());
			}
		} catch (IOException e) {
			throw new ResourcesException(ErrorMessage.UNEXPECTED_EXCEPTION, e.getMessage());
		}
	}

	private void writePropertiesFile(Element element, StandardLocation location) throws ResourcesException {
		String packageName = PropertiesUtil.getPackageName(element);
		String propertiesName = PropertiesUtil.getPropertiesName(element);

		String comments = "Properties generated by Resources.";

		try {
			FileObject fileObject = this.filer.createResource(location, packageName, propertiesName);
			Writer writer = fileObject.openWriter();

			java.util.Properties properties = PropertiesFactory.create(element);
			properties.store(writer, comments);

			writer.flush();
			writer.close();
		} catch (IOException e) {
			throw new ResourcesException(ErrorMessage.UNEXPECTED_EXCEPTION, e.getMessage());
		}
	}

	private void writeSourceFile(Element element, CompilationUnit compilationUnit) throws IOException {
		CharSequence content = ContentFactory.create(compilationUnit, element);

		JavaFileObject fileObject = this.filer.createSourceFile(SourcesUtil.getQualifiedName(element));
		Writer writer = fileObject.openWriter();
		writer.append(content);
		writer.flush();
		writer.close();
	}

}
