/*
   Copyright 2011 Benedito Barbosa Ribeiro Neto/Christian Linhares Peixoto/Mauricio da Silva Marinho

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 */
package org.wave.resources.units;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import javax.lang.model.element.Element;
import javax.lang.model.element.ElementKind;
import javax.lang.model.element.Name;
import javax.lang.model.element.TypeElement;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.wave.resources.annotations.Resource;
import org.wave.resources.factories.ContentFactory;
import org.wave.resources.units.ResourceUnit;


public class ResourceUnitTest {

	@Mock
	private Resource annotation;

	@Mock
	private Element element;

	private ResourceUnit unit;

	@Before
	public void setUp() {
		MockitoAnnotations.initMocks(this);

		Name enclosingSimpleName = mock(Name.class);
		when(enclosingSimpleName.toString()).thenReturn("MappedEnum");

		Name enclosingQualifiedName = mock(Name.class);
		when(enclosingQualifiedName.toString()).thenReturn("br.com.company.project.enums.MappedEnum");

		TypeElement enclosingElement = mock(TypeElement.class);
		when(enclosingElement.getKind()).thenReturn(ElementKind.ENUM);
		when(enclosingElement.getSimpleName()).thenReturn(enclosingSimpleName);
		when(enclosingElement.getQualifiedName()).thenReturn(enclosingQualifiedName);

		when(this.annotation.template()).thenReturn("Template");

		Name simpleName = mock(Name.class);
		when(simpleName.toString()).thenReturn("ENUM_CONSTANT");

		when(this.element.getAnnotation(Resource.class)).thenReturn(this.annotation);
		when(this.element.getKind()).thenReturn(ElementKind.ENUM_CONSTANT);
		when(this.element.getSimpleName()).thenReturn(simpleName);
		when(this.element.getEnclosingElement()).thenReturn(enclosingElement);

		this.unit = new ResourceUnit();
	}

	@Test
	public void deveDefinirOCodigoDaClasseQuandoOTemplateNaoTiverParametros() {
		StringBuilder builder = new StringBuilder();

		builder.append("/*\n");
		builder.append(" * Java source generated by Resources.\n");
		builder.append(" */\n");

		builder.append("package br.com.company.project.enums.resources;\n\n");

		builder.append("import br.com.brasilti.resources.core.Resource;\n\n");

		builder.append("public class MappedEnum_EnumConstant extends Resource {\n\n");

		builder.append("\tpublic MappedEnum_EnumConstant(String bundleName) {\n");
		builder.append("\t\tsuper(bundleName);\n");
		builder.append("\t}\n\n");

		builder.append("\t/**\n");
		builder.append("\t* Template: Template\n");
		builder.append("\t* \n");
		builder.append("\t* @return MessageFormat.format(template);\n");
		builder.append("\t*/\n");
		builder.append("\tpublic String getValue() {\n");
		builder.append("\t\treturn Resource.getValue(this.bundleName, this.getKey());\n");
		builder.append("\t}\n\n");

		builder.append("}\n");

		assertEquals(builder.toString(), ContentFactory.create(this.unit, this.element));
	}

	@Test
	public void deveDefinirOCodigoDaClasseQuandoOTemplateTiverParametros() {
		when(this.annotation.template()).thenReturn("Template {PARAM}");

		StringBuilder builder = new StringBuilder();

		builder.append("/*\n");
		builder.append(" * Java source generated by Resources.\n");
		builder.append(" */\n");

		builder.append("package br.com.company.project.enums.resources;\n\n");

		builder.append("import br.com.brasilti.resources.core.Resource;\n\n");

		builder.append("public class MappedEnum_EnumConstant extends Resource {\n\n");

		builder.append("\tpublic MappedEnum_EnumConstant(String bundleName) {\n");
		builder.append("\t\tsuper(bundleName);\n");
		builder.append("\t}\n\n");

		builder.append("\t/**\n");
		builder.append("\t* Template: Template {PARAM}\n");
		builder.append("\t* \n");
		builder.append("\t* @param param\n");
		builder.append("\t* @return MessageFormat.format(template, param);\n");
		builder.append("\t*/\n");
		builder.append("\tpublic String getValue(String param) {\n");
		builder.append("\t\treturn Resource.getValue(this.bundleName, this.getKey(), param);\n");
		builder.append("\t}\n\n");

		builder.append("}\n");

		assertEquals(builder.toString(), ContentFactory.create(this.unit, this.element));
	}

	@After
	public void tearDown() {
		this.unit = null;
	}

}
