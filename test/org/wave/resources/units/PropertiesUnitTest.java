/*
   Copyright 2011 Benedito Barbosa Ribeiro Neto/Christian Linhares Peixoto/Mauricio da Silva Marinho

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 */
package org.wave.resources.units;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import javax.lang.model.element.Element;
import javax.lang.model.element.ElementKind;
import javax.lang.model.element.Name;
import javax.lang.model.element.TypeElement;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.wave.resources.annotations.Properties;
import org.wave.resources.factories.ContentFactory;
import org.wave.resources.units.PropertiesUnit;


public class PropertiesUnitTest {

	@Mock
	private Properties annotation;

	@Mock
	private TypeElement element;

	private PropertiesUnit unit;

	@Before
	public void setUp() {
		MockitoAnnotations.initMocks(this);

		when(this.annotation.bundleName()).thenReturn("");

		Name simpleName = mock(Name.class);
		when(simpleName.toString()).thenReturn("MappedEnum");

		Name qualifiedName = mock(Name.class);
		when(qualifiedName.toString()).thenReturn("br.com.company.project.enums.MappedEnum");

		when(this.element.getAnnotation(Properties.class)).thenReturn(this.annotation);
		when(this.element.getKind()).thenReturn(ElementKind.ENUM);
		when(this.element.getSimpleName()).thenReturn(simpleName);
		when(this.element.getQualifiedName()).thenReturn(qualifiedName);

		this.unit = new PropertiesUnit();
	}

	@Test
	public void deveDefinirOCodigoDaClasseQuandoOBundleNameDoElementoForVazio() {
		StringBuilder builder = new StringBuilder();

		builder.append("/*\n");
		builder.append(" * Java source generated by Resources.\n");
		builder.append(" */\n");

		builder.append("package br.com.company.project.enums;\n\n");

		builder.append("public class MappedEnum_ {\n\n");

		builder.append("\tprivate static final String BUNDLE_NAME = \"br.com.company.project.enums.properties.MappedEnum\";\n\n");

		builder.append("}\n");

		assertEquals(builder.toString(), ContentFactory.create(this.unit, this.element));
	}

	@Test
	public void deveDefinirOCodigoDaClasseQuandoOBundleNameDoElementoEstiverPreenchido() {
		String bundleName = "br.com.company.project.properties.Resources";
		when(this.annotation.bundleName()).thenReturn(bundleName);

		StringBuilder builder = new StringBuilder();

		builder.append("/*\n");
		builder.append(" * Java source generated by Resources.\n");
		builder.append(" */\n");

		builder.append("package br.com.company.project.enums;\n\n");

		builder.append("public class MappedEnum_ {\n\n");

		builder.append("\tprivate static final String BUNDLE_NAME = \"" + bundleName + "\";\n\n");

		builder.append("}\n");

		assertEquals(builder.toString(), ContentFactory.create(this.unit, this.element));
	}

	@Test
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public void deveDefinirOCodigoDaClasseQuandoOElementoTiverConstantes() {
		Name enclosedSimpleName = mock(Name.class);
		when(enclosedSimpleName.toString()).thenReturn("ENUM_CONSTANT");

		Element enclosedElement = mock(Element.class);
		when(enclosedElement.getKind()).thenReturn(ElementKind.ENUM_CONSTANT);
		when(enclosedElement.getSimpleName()).thenReturn(enclosedSimpleName);
		when(enclosedElement.getEnclosingElement()).thenReturn(this.element);

		List enclosedElements = new ArrayList();
		enclosedElements.add(enclosedElement);

		when(this.element.getEnclosedElements()).thenReturn(enclosedElements);

		StringBuilder builder = new StringBuilder();

		builder.append("/*\n");
		builder.append(" * Java source generated by Resources.\n");
		builder.append(" */\n");

		builder.append("package br.com.company.project.enums;\n\n");

		builder.append("import br.com.company.project.enums.resources.MappedEnum_EnumConstant;\n\n");

		builder.append("public class MappedEnum_ {\n\n");

		builder.append("\tprivate static final String BUNDLE_NAME = \"br.com.company.project.enums.properties.MappedEnum\";\n\n");

		builder.append("\tpublic static final MappedEnum_EnumConstant ENUM_CONSTANT = new MappedEnum_EnumConstant(BUNDLE_NAME);\n\n");

		builder.append("}\n");

		assertEquals(builder.toString(), ContentFactory.create(this.unit, this.element));
	}

	@After
	public void tearDown() {
		this.unit = null;
	}

}
